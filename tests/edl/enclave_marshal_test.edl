enclave {
    from "sgx_tstdc.edl" import 
	sgx_thread_wait_untrusted_event_ocall, 
	sgx_thread_set_untrusted_event_ocall, 
	sgx_thread_setwait_untrusted_events_ocall, 
	sgx_thread_set_multiple_untrusted_events_ocall, 
	sgx_oc_cpuidex;

    trusted {
		/* define ECALLs here. */
		public int marshal_test_init_enclave(uint64_t host_zone_id, uint64_t host_id, uint64_t child_zone_id, [out]uint64_t* root_object);		
		public void marshal_test_destroy_enclave();

        public int call_enclave(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t encoding,                                  //format of the serialised data
            uint64_t tag,                                       //info on the type of the call passed from the idl generator 
            uint64_t caller_channel_zone_id,                    //last zone where the call came from
            uint64_t caller_zone_id,                            //zone where the call originated from
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t interface_id,                              //interface to be called
            uint64_t method_id,                                 //method to be called
            size_t sz_in,                                       //size of incoming payload
            [in, size=sz_in] const char* data_in,               //incoming payload
            size_t sz_out,                                      //size of out buffer
            [out, size=sz_out] char* data_out,                  //output buffer
            [out] size_t* data_out_sz,                          //size that buffer should be if too small
            [user_check] void** retry_buffer                    //enclave pointer to serialised data to be copied to the output buffer once it is big enough
        );
        public int try_cast_enclave(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t interface_id                               //interface to be called
        );
        public uint64_t add_ref_enclave(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t destination_channel_zone_id,               //the channel where the add ref should be going to
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t caller_channel_zone_id,                    //last zone where the call came from
            uint64_t caller_zone_id,                            //the original zone where the call came from
            char build_out_param_channel                        //an rpc add_ref_options flag
        );
        public uint64_t release_enclave(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t caller_zone_id                             //the original zone where the call came from
        );
    };

    untrusted {
        int call_host(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t encoding,                                  //format of the serialised data
            uint64_t tag,                                       //info on the type of the call 
            uint64_t caller_channel_zone_id,                    //last zone where the call came from
            uint64_t caller_zone_id,                            //the original zone where the call came from, 
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t interface_id,                              //interface to be called
            uint64_t method_id,                                 //method to be called
            size_t sz_in,                                       //size of incoming payload
            [in, size=sz_in] const char* data_in,               //incoming payload 
            size_t sz_out,                                      //size of out buffer 
            [out, size=sz_out] char* data_out,                  //output buffer 
            [out] size_t* data_out_sz                           //size that buffer should be if too small 
            );

        //for casting interfaces
        int try_cast_host(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t interface_id                               //interface to be called
            );

        //for adding reference count
        uint64_t add_ref_host(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t destination_channel_zone_id,               //the channel where the add ref should be going to 
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t caller_channel_zone_id,                    //last zone where the call came from
            uint64_t caller_zone_id,                            //the original zone where the call came from, 
            char build_out_param_channel                        //an rpc add_ref_options flag
            );
            
        //for decrementing reference counts
        uint64_t release_host(
            uint64_t protocol_version,                          //version of the rpc call protocol
            uint64_t destination_zone_id,                       //zone where the call is going to
            uint64_t object_id,                                 //rpc object index
            uint64_t caller_zone_id                             //the original zone where the call came from
            );

        void rpc_log([in, size=sz] const char* str, size_t sz);


        void on_service_creation_host([in, string] const char* name, uint64_t zone_id);
        void on_service_deletion_host([in, string] const char* name, uint64_t zone_id);
        void on_service_try_cast_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t caller_zone_id, uint64_t object_id, uint64_t interface_id);
        void on_service_add_ref_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_channel_zone_id, uint64_t destination_zone_id, uint64_t object_id, uint64_t caller_channel_zone_id, uint64_t caller_zone_id, uint64_t options);
        void on_service_release_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_channel_zone_id, uint64_t destination_zone_id, uint64_t object_id, uint64_t caller_zone_id);

        void on_service_proxy_creation_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t caller_zone_id);
        void on_service_proxy_deletion_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t caller_zone_id);
        void on_service_proxy_try_cast_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t caller_zone_id, uint64_t object_id, uint64_t interface_id);
        void on_service_proxy_add_ref_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t destination_channel_zone_id, uint64_t caller_zone_id, uint64_t object_id);
        void on_service_proxy_release_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t destination_channel_zone_id, uint64_t caller_zone_id, uint64_t object_id); 
        void on_service_proxy_add_external_ref_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_channel_zone_id, uint64_t destination_zone_id, uint64_t caller_zone_id, int ref_count);
        void on_service_proxy_release_external_ref_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_channel_zone_id, uint64_t destination_zone_id, uint64_t caller_zone_id, int ref_count); 

        void on_impl_creation_host([in, string] const char* name, uint64_t address, uint64_t zone_id);
        void on_impl_deletion_host([in, string] const char* name, uint64_t address, uint64_t zone_id);

        void on_stub_creation_host(uint64_t zone_id, uint64_t object_id, uint64_t address);    
        void on_stub_deletion_host(uint64_t zone_id, uint64_t object_id);
        void on_stub_send_host(uint64_t zone_id, uint64_t object_id, uint64_t interface_id, uint64_t method_id);
        void on_stub_add_ref_host(uint64_t zone_id, uint64_t object_id, uint64_t interface_id, uint64_t count, uint64_t caller_zone_id);
        void on_stub_release_host(uint64_t zone_id, uint64_t object_id, uint64_t interface_id, uint64_t count, uint64_t caller_zone_id);

        void on_object_proxy_creation_host(uint64_t zone_id, uint64_t destination_zone_id, uint64_t object_id, int add_ref_done);
        void on_object_proxy_deletion_host(uint64_t zone_id, uint64_t destination_zone_id, uint64_t object_id);

        void on_proxy_creation_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t object_id, uint64_t interface_id);
        void on_proxy_deletion_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t object_id, uint64_t interface_id);
        void on_proxy_send_host([in, string] const char* name, uint64_t zone_id, uint64_t destination_zone_id, uint64_t object_id, uint64_t interface_id, uint64_t method_id);

        void message_host(uint64_t level, [in, string] const char* name);  
    };
};
