/*
 *   Copyright (c) 2025 Edward Boggis-Rolfe
 *   All rights reserved.
 */
enclave {
    from "sgx_tstdc.edl" import *;
    from "rpc_telemetry.edl" import *;

    trusted {
        /* define ECALLs here. */
        public int marshal_test_init_enclave(uint64_t host_zone_id, uint64_t host_id, uint64_t child_zone_id, [out]uint64_t* root_object);
        public void marshal_test_destroy_enclave();

        public int call_enclave(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t encoding,                                  // format of the serialised data
            uint64_t tag,                                       // info on the type of the call passed from the idl generator
            uint64_t caller_channel_zone_id,                    // last zone where the call came from
            uint64_t caller_zone_id,                            // zone where the call originated from
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t interface_id,                              // interface to be called
            uint64_t method_id,                                 // method to be called
            size_t sz_in,                                       // size of incoming payload
            [in, size=sz_in] const char* data_in,               // incoming payload
            size_t sz_out,                                      // size of out buffer
            [out, size=sz_out] char* data_out,                  // output buffer
            [out] size_t* data_out_sz,                          // size that buffer should be if too small
            [user_check] void** retry_buffer                   // enclave pointer to serialised data to be copied to the output buffer once it is big enough
        );
        
        public int post_enclave(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t encoding,                                  // format of the serialised data
            uint64_t tag,                                       // info on the type of the call passed from the idl generator
            uint64_t caller_channel_zone_id,                    // last zone where the call came from
            uint64_t caller_zone_id,                            // zone where the call originated from
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t interface_id,                              // interface to be called
            uint64_t method_id,                                 // method to be called
            size_t sz_in,                                       // size of incoming payload
            [in, size=sz_in] const char* data_in,               // incoming payload
            size_t sz_out,                                      // size of out buffer
            [out, size=sz_out] char* data_out,                  // output buffer
            [out] size_t* data_out_sz,                          // size that buffer should be if too small
            [user_check] void** retry_buffer                   // enclave pointer to serialised data to be copied to the output buffer once it is big enough
        );
        
        public int try_cast_enclave(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t interface_id,                              // interface to be called
            size_t sz_in_back_channel,                          // size of incoming back-channel data
            [in, size=sz_in_back_channel] const char* in_back_channel,  // incoming back-channel data
            size_t sz_out_back_channel,                         // size of out back-channel buffer
            [out, size=sz_out_back_channel] char* out_back_channel,     // output back-channel buffer
            [out] size_t* out_back_channel_sz                   // actual size of out back-channel data
        );
        public int add_ref_enclave(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t destination_channel_zone_id,               // the channel where the add ref should be going to
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t caller_channel_zone_id,                    // last zone where the call came from may be different if build_out_param_channel == build_destination_route or build_caller_route
            uint64_t caller_zone_id,                            // the original zone where the call came from
            uint64_t known_direction_zone_id,                   // the last zone where the call came from,
            char build_out_param_channel,                       // an rpc add_ref_options flag
            [out] uint64_t* reference_count,                    // reference count output
            size_t sz_in_back_channel,                          // size of incoming back-channel data
            [in, size=sz_in_back_channel] const char* in_back_channel,  // incoming back-channel data
            size_t sz_out_back_channel,                         // size of out back-channel buffer
            [out, size=sz_out_back_channel] char* out_back_channel,     // output back-channel buffer
            [out] size_t* out_back_channel_sz                   // actual size of out back-channel data
        );
        public int release_enclave(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t caller_zone_id,                            // the original zone where the call came from
            char options,                                       // an rpc release_options flag
            [out] uint64_t* reference_count,                    // reference count output
            size_t sz_in_back_channel,                          // size of incoming back-channel data
            [in, size=sz_in_back_channel] const char* in_back_channel,  // incoming back-channel data
            size_t sz_out_back_channel,                         // size of out back-channel buffer
            [out, size=sz_out_back_channel] char* out_back_channel,     // output back-channel buffer
            [out] size_t* out_back_channel_sz                   // actual size of out back-channel data
        );
    };

    untrusted {
        int call_host(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t encoding,                                  // format of the serialised data
            uint64_t tag,                                       // info on the type of the call
            uint64_t caller_channel_zone_id,                    // last zone where the call came from
            uint64_t caller_zone_id,                            // the original zone where the call came from,
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t interface_id,                              // interface to be called
            uint64_t method_id,                                 // method to be called
            size_t sz_in,                                       // size of incoming payload
            [in, size=sz_in] const char* data_in,               // incoming payload
            size_t sz_out,                                      // size of out buffer
            [out, size=sz_out] char* data_out,                  // output buffer
            [out] size_t* data_out_sz                          // size that buffer should be if too small
            );
            

        int post_host(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t encoding,                                  // format of the serialised data
            uint64_t tag,                                       // info on the type of the call
            uint64_t caller_channel_zone_id,                    // last zone where the call came from
            uint64_t caller_zone_id,                            // the original zone where the call came from,
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t interface_id,                              // interface to be called
            uint64_t method_id,                                 // method to be called
            size_t sz_in,                                       // size of incoming payload
            [in, size=sz_in] const char* data_in,               // incoming payload
            size_t sz_out,                                      // size of out buffer
            [out, size=sz_out] char* data_out,                  // output buffer
            [out] size_t* data_out_sz                          // size that buffer should be if too small
            );            

        // for casting interfaces
        int try_cast_host(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t interface_id,                              // interface to be called
            size_t sz_in_back_channel,                          // size of incoming back-channel data
            [in, size=sz_in_back_channel] const char* in_back_channel,  // incoming back-channel data
            size_t sz_out_back_channel,                         // size of out back-channel buffer
            [out, size=sz_out_back_channel] char* out_back_channel,     // output back-channel buffer
            [out] size_t* out_back_channel_sz                   // actual size of out back-channel data
            );

        // for adding reference count
        int add_ref_host(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t destination_channel_zone_id,               // the channel where the add ref should be going to
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t caller_channel_zone_id,                    // last zone where the call came from may be different if build_out_param_channel == build_destination_route or build_caller_route
            uint64_t caller_zone_id,                            // the original zone where the call came from,
            uint64_t known_direction_zone_id,                   // the last zone where the call came from,
            char build_out_param_channel,                       // an rpc add_ref_options flag
            [out] uint64_t* reference_count,                    // reference count output
            size_t sz_in_back_channel,                          // size of incoming back-channel data
            [in, size=sz_in_back_channel] const char* in_back_channel,  // incoming back-channel data
            size_t sz_out_back_channel,                         // size of out back-channel buffer
            [out, size=sz_out_back_channel] char* out_back_channel,     // output back-channel buffer
            [out] size_t* out_back_channel_sz                   // actual size of out back-channel data
            );

        // for decrementing reference counts
        int release_host(
            uint64_t protocol_version,                          // version of the rpc call protocol
            uint64_t destination_zone_id,                       // zone where the call is going to
            uint64_t object_id,                                 // rpc object index
            uint64_t caller_zone_id,                            // the original zone where the call came from
            char options,                                       // an rpc release_options flag
            [out] uint64_t* reference_count,                    // reference count output
            size_t sz_in_back_channel,                          // size of incoming back-channel data
            [in, size=sz_in_back_channel] const char* in_back_channel,  // incoming back-channel data
            size_t sz_out_back_channel,                         // size of out back-channel buffer
            [out, size=sz_out_back_channel] char* out_back_channel,     // output back-channel buffer
            [out] size_t* out_back_channel_sz                   // actual size of out back-channel data
            );

        void rpc_log(int level, [in, size=sz] const char* str, size_t sz);
        void hang();
    };
};
