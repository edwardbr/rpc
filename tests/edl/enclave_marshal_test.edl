enclave {
    from "sgx_tstdc.edl" import 
	sgx_thread_wait_untrusted_event_ocall, 
	sgx_thread_set_untrusted_event_ocall, 
	sgx_thread_setwait_untrusted_events_ocall, 
	sgx_thread_set_multiple_untrusted_events_ocall, 
	sgx_oc_cpuidex;

    trusted {
		/* define ECALLs here. */
		public int marshal_test_init_enclave(uint64_t host_zone_id, uint64_t child_zone_id, [out]uint64_t* root_object);		
		public void marshal_test_destroy_enclave();

        public int call_enclave(uint64_t object_id, uint64_t interface_id, uint64_t method_id, size_t sz_int, [in, size=sz_int] const char* data_in, size_t sz_out, [out, size=sz_out] char* data_out, [out] size_t* data_out_sz, [user_check] void** tls);
        public int try_cast_enclave(uint64_t zone_id, uint64_t object_id, uint64_t interface_id);
        public uint64_t add_ref_enclave(uint64_t zone_id, uint64_t object_id);
        public uint64_t release_enclave(uint64_t zone_id, uint64_t object_id);
    };

    untrusted {
        int call_host(uint64_t object_id, uint64_t interface_id, uint64_t method_id, size_t sz_int, [in, size=sz_int] const char* data_in, size_t sz_out, [out, size=sz_out] char* data_out, [out] size_t* data_out_sz);
        int try_cast_host(uint64_t zone_id, uint64_t object_id, uint64_t interface_id);
        uint64_t add_ref_host(uint64_t zone_id, uint64_t object_id);
        uint64_t release_host(uint64_t zone_id, uint64_t object_id);

        void log_str([in, size=sz] const char* str, size_t sz);
    };
};
