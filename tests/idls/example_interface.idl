#import "example_shared.idl"
#import "example_import.idl"

namespace yyy
{
    interface i_example
    {
        error_code add(int a, int b, [out, by_value] int& c);
        error_code create_foo([out]rpc::shared_ptr<xxx::i_foo>& target);
        error_code create_multiple_inheritance([out]rpc::shared_ptr<xxx::i_baz>& target);
    
        error_code recieve_interface([out]rpc::shared_ptr<xxx::i_foo>& val);//can be null
        error_code give_interface([in]const rpc::shared_ptr<xxx::i_baz> val);//can be null
        error_code call_create_enclave_val(rpc::shared_ptr<i_host> host);//can be null
        error_code call_create_enclave(const rpc::shared_ptr<i_host>& host);//can be null

        error_code call_host_create_enclave_and_throw_away();
        error_code call_host_create_enclave([out] rpc::shared_ptr<i_example>& target);

        //live app registry, it should have sole responsibility for the long term storage of app shared ptrs
        error_code call_host_look_up_app(const std::string& name, [out] rpc::shared_ptr<i_example>& app);
        error_code call_host_set_app(const std::string& name, [in] const rpc::shared_ptr<i_example>& app);
        error_code call_host_unload_app(const std::string& name);
    };

    interface i_host
    {
        error_code create_enclave([out] rpc::shared_ptr<i_example>& target);

        //live app registry, it should have sole responsibility for the long term storage of app shared ptrs
        error_code look_up_app(const std::string& name, [out] rpc::shared_ptr<i_example>& app);
        error_code set_app(const std::string& name, [in] const rpc::shared_ptr<i_example>& app);
        error_code unload_app(const std::string& name);
  };
} 